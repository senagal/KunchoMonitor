<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KunchoMonitor</name>
    </assembly>
    <members>
        <member name="T:activity.Controllers.ActivityController">
            <summary>
            Controller responsible for managing activities related to content.
            </summary>
        </member>
        <member name="M:activity.Controllers.ActivityController.#ctor(content.Services.IActivityServices)">
            <summary>
            Initializes a new instance of the <see cref="T:activity.Controllers.ActivityController"/> class.
            </summary>
            <param name="activityService">The service used to manage activities.</param>
        </member>
        <member name="M:activity.Controllers.ActivityController.GetActivity(System.Int32)">
            <summary>
            Retrieves the activity associated with the specified content ID.
            </summary>
            <param name="contentId">The unique identifier of the content.</param>
            <returns>The activity associated with the given content ID, or NotFound if it doesn't exist.</returns>
        </member>
        <member name="T:activity.Services.ActivityService">
            <summary>
            Service class to handle operations related to Activity.
            </summary>
        </member>
        <member name="M:activity.Services.ActivityService.#ctor(MongoConnect)">
            <summary>
            Initializes a new instance of the <see cref="T:activity.Services.ActivityService"/> class.
            </summary>
            <param name="mongoConnect">The database connection object.</param>
        </member>
        <member name="M:activity.Services.ActivityService.AddActivity(System.Int32)">
            <summary>
            Adds an activity related to a specific content by its contentId.
            </summary>
            <param name="contentId">The content's ID.</param>
            <returns>A task representing the asynchronous operation, with an <see cref="T:activity.Models.Activity"/> as the result.</returns>
        </member>
        <member name="M:activity.Services.ActivityService.GetActivityByContentId(System.Int32)">
            <summary>
            Retrieves the most recent activity associated with a contentId.
            </summary>
            <param name="contentId">The content's ID.</param>
            <returns>A task representing the asynchronous operation, with an <see cref="T:activity.Models.Activity"/> as the result.</returns>
        </member>
        <member name="T:content.Controllers.ContentController">
            <summary>
            Controller responsible for managing content-related operations.
            </summary>
        </member>
        <member name="M:content.Controllers.ContentController.#ctor(content.Services.IContentServices,content.Services.IActivityServices)">
            <summary>
            Initializes a new instance of the <see cref="T:content.Controllers.ContentController"/> class.
            </summary>
            <param name="contentService">The service used to manage content.</param>
            <param name="activityService">The service used to log activities.</param>
        </member>
        <member name="M:content.Controllers.ContentController.AddContent(content.Models.Content)">
            <summary>
            Adds new content to the system.
            </summary>
            <param name="newContent">The content to add.</param>
            <returns>The newly created content.</returns>
        </member>
        <member name="M:content.Controllers.ContentController.GetContentById(System.Int32)">
            <summary>
            Retrieves the content with the specified ID.
            </summary>
            <param name="id">The unique identifier of the content.</param>
            <returns>The content with the given ID, or NotFound if it doesn't exist.</returns>
        </member>
        <member name="M:content.Controllers.ContentController.UpdateContent(System.Int32,content.Models.Content)">
            <summary>
            Deletes the content with the specified ID.
            </summary>
            <param name="id">The unique identifier of the content to delete.</param>
            <returns>No content response if deletion is successful, or NotFound if content doesn't exist.</returns>
        </member>
        <member name="M:content.Controllers.ContentController.SearchAndFilterContent(System.String,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Searches and filters content based on specified query parameters with pagination support.
            </summary>
            <param name="query">The search query string.</param>
            <param name="id">The content ID filter (optional).</param>
            <param name="page">The page number for pagination (defaults to 1).</param>
            <param name="pageSize">The number of results per page (defaults to 10).</param>
            <returns>A list of content matching the search and filter criteria.</returns>
        </member>
        <member name="T:content.Services.ContentService">
            <summary>
            Service class to handle operations related to Content.
            </summary>
        </member>
        <member name="M:content.Services.ContentService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:content.Services.ContentService"/> class.
            </summary>
            <param name="config">Configuration settings.</param>
        </member>
        <member name="M:content.Services.ContentService.SearchAndFilterContent(content.Models.SearchFilterCriteria)">
            <summary>
            Searches and filters content based on the provided criteria.
            </summary>
            <param name="criteria">Search filter criteria.</param>
            <returns>A task representing the asynchronous operation, with a list of <see cref="T:content.Models.Content"/>.</returns>
        </member>
        <member name="M:content.Services.ContentService.SearchAndFilterWithPagination(System.String,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Searches, filters, and applies pagination to content.
            </summary>
            <param name="query">Search query for title or body.</param>
            <param name="id">Content ID to filter by.</param>
            <param name="page">Page number for pagination.</param>
            <param name="pageSize">Page size for pagination.</param>
            <returns>A task representing the asynchronous operation, with a list of <see cref="T:content.Models.Content"/>.</returns>
        </member>
        <member name="M:content.Services.ContentService.GetContentById(System.Int32)">
            <summary>
            Retrieves a content item by its ID.
            </summary>
            <param name="id">The ID of the content to retrieve.</param>
            <returns>A task representing the asynchronous operation, with a <see cref="T:content.Models.Content"/> as the result.</returns>
        </member>
        <member name="M:content.Services.ContentService.AddContent(content.Models.Content)">
            <summary>
            Adds a new content item.
            </summary>
            <param name="newContent">The new content to add.</param>
            <returns>A task representing the asynchronous operation, with the added <see cref="T:content.Models.Content"/>.</returns>
        </member>
        <member name="M:content.Services.ContentService.UpdateContent(System.Int32,content.Models.Content)">
            <summary>
            Updates an existing content item by its ID.
            </summary>
            <param name="id">The ID of the content to update.</param>
            <param name="updatedContent">The updated content data.</param>
            <returns>A task representing the asynchronous operation, with the updated <see cref="T:content.Models.Content"/>.</returns>
        </member>
        <member name="M:content.Services.ContentService.DeleteContent(System.Int32)">
            <summary>
            Deletes a content item by its ID.
            </summary>
            <param name="id">The ID of the content to delete.</param>
            <returns>A task representing the asynchronous operation, indicating if the deletion was successful.</returns>
        </member>
        <member name="M:UsersController.#ctor(content.Services.IUserServices)">
            <summary>
            Initializes a new instance of the <see cref="T:UsersController"/> class.
            </summary>
            <param name="userService">The service used to manage users.</param>
        </member>
        <member name="M:UsersController.Register(user.Models.User)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="newUser">The new user to register.</param>
            <returns>A success message indicating that the user was registered.</returns>
        </member>
        <member name="M:UsersController.Login(user.Models.User)">
            <summary>
            Authenticates a user and returns a JWT token.
            </summary>
            <param name="loginUser">The login credentials of the user.</param>
            <returns>A JWT token if credentials are valid, or an Unauthorized response if invalid.</returns>
        </member>
        <member name="M:UsersController.GetAllUsers">
            <summary>
            Retrieves a list of all users.
            </summary>
            <returns>A list of all users in the system.</returns>
        </member>
        <member name="M:UsersController.GetUserByUsername(System.String)">
            <summary>
            Retrieves the user with the specified ID.
            </summary>
            <param name="id">The unique identifier of the user.</param>
            <returns>The user with the given ID, or NotFound if the user doesn't exist.</returns>
        </member>
        <member name="T:UserService">
            <summary>
            Service class to handle user-related operations like authentication and registration.
            </summary>
        </member>
        <member name="M:UserService.#ctor(MongoConnect)">
            <summary>
            Initializes a new instance of the <see cref="T:UserService"/> class.
            </summary>
            <param name="dbContext">The database connection object.</param>
        </member>
        <member name="M:UserService.AddUser(user.Models.User)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="newUser">The user details.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:UserService.AuthenticateUserAsync(System.String,System.String)">
            <summary>
            Authenticates a user by username and password.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>A task representing the asynchronous operation, with a <see cref="T:user.Models.User"/> object if authenticated.</returns>
        </member>
        <member name="M:UserService.Login(System.String,System.String)">
            <summary>
            Logs in a user by generating a JWT token.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>A task representing the asynchronous operation, with the generated JWT token.</returns>
        </member>
        <member name="M:UserService.GetUserByUsername(System.String)">
            <summary>
            Retrieves a user by their ID.
            </summary>
            <param name="userId">The ID of the user to retrieve.</param>
            <returns>A task representing the asynchronous operation, with the <see cref="T:user.Models.User"/> object.</returns>
        </member>
        <member name="M:UserService.GetAllUsers">
            <summary>
            Retrieves all users from the system.
            </summary>
            <returns>A task representing the asynchronous operation, with a list of <see cref="T:user.Models.User"/> objects.</returns>
        </member>
    </members>
</doc>
